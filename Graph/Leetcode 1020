class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public int numEnclaves(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int cnt=0;
        Queue<Pair> q=new LinkedList<>();
        int[][] visit=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 || j==0 || i==m-1 || j==n-1){
                    if(grid[i][j]==1){
                        q.add(new Pair(i,j));
                        visit[i][j]=1;
                    }
                }
            }
        }
        int[] drow={-1,0,1,0};
        int[] dcol={0,1,0,-1};
       while(!q.isEmpty()){
        int row=q.peek().first;
        int col=q.peek().second;
        q.remove();
        for(int i=0;i<4;i++){
            int nrow=row+drow[i];
            int ncol=col+dcol[i];
            if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && grid[nrow][ncol]==1 && visit[nrow][ncol]==0 ){
                visit[nrow][ncol]=1;
                q.add(new Pair(nrow,ncol));
            }
        }
       }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && visit[i][j]==0){
                    cnt++;
                }
            }
        }
       
       return cnt;
    }
}
