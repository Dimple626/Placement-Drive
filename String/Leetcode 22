public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        dfs(n, n, new StringBuilder(), ans);
        return ans;
    }
    
    private void dfs(int open, int close, StringBuilder sb, List<String> ans) {
        if (open == 0 && close == 0) {
            ans.add(sb.toString());
            return;
        }
        
        // Add '(' if available
        if (open > 0) {
            sb.append('(');
            dfs(open - 1, close, sb, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
        
        // Add ')' if valid
        if (close > open) {
            sb.append(')');
            dfs(open, close - 1, sb, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
